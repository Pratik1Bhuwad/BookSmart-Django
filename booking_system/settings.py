"""
Django settings for booking_system project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-deel(4q4)p*xlaqhu9)0byrzen#&a9su8bua@71jd16o5^x1ku'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'appointments', # new app
    'accounts',     # new app
    'providers',    # new app
    'services',     # new app
]

LOGIN_REDIRECT_URL = 'appointment_list'  # Redirect after successful login
LOGOUT_REDIRECT_URL = 'logout_message' # Redirect after logout
LOGIN_URL = 'login'  # URL for the login page

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'booking_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'booking_system.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

import os
    # Media files (User-uploaded content)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

LOGIN_REDIRECT_URL = 'login_redirect' # Redirects to our new view
LOGOUT_REDIRECT_URL = 'logout_message'
LOGIN_URL = 'login'



# booking_system/settings.py

# ... (existing settings)

# Add your Stripe API Keys here
# For production, use environment variables (e.g., os.environ.get('STRIPE_PUBLISHABLE_KEY'))
STRIPE_PUBLISHABLE_KEY = 'STRIPE_PUBLISHABLE_KEY'
STRIPE_SECRET_KEY = 'STRIPE_SECRET_KEY'
STRIPE_WEBHOOK_SECRET = 'STRIPE_WEBHOOK_SECRET'


DOMAIN_NAME = 'DOMAIN_NAME'
# ngrok URL to ALLOWED_HOSTS
ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'ALLOWED_HOSTS']

# Add your ngrok URL (including the scheme) to CSRF_TRUSTED_ORIGINS
# This is crucial for allowing POST requests from your ngrok domain
CSRF_TRUSTED_ORIGINS = [
    'http://127.0.0.1:8000', # For local development
    'http://localhost:8000', # For local development
    'DOMAIN_NAME', # Your ngrok domain (use https if ngrok provides it)
]


# Email configuration for notifications
# In development, Django will print emails to the console.
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# For a production setup, you would use a service like:
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.sendgrid.net'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your_sendgrid_username'
# EMAIL_HOST_PASSWORD = 'your_sendgrid_password'
DEFAULT_FROM_EMAIL = 'DEFAULT_FROM_EMAIL'


# Placeholder for SMS API configuration (e.g., Twilio)
# TWILIO_ACCOUNT_SID = 'ACxxxxxxxxxxxxxxxxxxxx'
# TWILIO_AUTH_TOKEN = 'your_auth_token'
# TWILIO_PHONE_NUMBER = '+15017122661'



import os # Ensure os is imported

# ... (all your existing settings)

# Set DEBUG to True for local development
DEBUG = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# This is where Django will look for project-wide static files in development.
# Create a folder named 'static' in your project root for this to work.
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# This is the URL that your browser will use to access static files.
# The development server will automatically handle this path.
STATIC_URL = 'static/'

# This is the directory where `collectstatic` will copy all static files
# from all your apps and STATICFILES_DIRS for production deployment.
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')